<h1>About</h1>
<p>組長：41023119 呂承劼</p>
<p>組員：41023114 王樟皓、41023126 卓桓琮、41023138 林敬燐</p>
<p>倉儲 :<span> </span><a href="https://github.com/mdecd2023/2a2-pj2ag2">https://github.com/mdecd2023/2a2-pj1ag2</a></p>
<p>網站 :<span> </span><a href="https://mdecd2023.github.io/2a2-pj2ag2/content/index.html">https://mdecd2023.github.io/2a2-pj1ag2/content/index.html</a></p>
<p><a href="https://mde.tw/pjcopsim">https://mde.tw/pjcopsim</a></p>
<h1>pj1</h1>
<p>3/30 已完成場地及感測器</p>
<p><img alt="" height="405" src="/downloads/ag10/20230330.png" width="720"/></p>
<p>4/14 完成記分板程式</p>
<p><img alt="" height="405" src="/downloads/ag10/20230414.png" width="720"/></p>
<p>4/14 可進行計分</p>
<p>觸碰到感測器球及機器人會重置到原本的位置</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/QrEx-9oWQ-c" title="YouTube video player" width="560"></iframe></p>
<p>在錄影時記分板不會顯示出來-附上圖片</p>
<p><img alt="" height="405" src="/downloads/ag10/20230414-1.png" width="720"/></p>
<p>當分數為5分時，會暫停模擬</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/fWbkG7gVaFw" title="YouTube video player" width="560"></iframe></p>
<p>在製作感測器時求記得把 collidable、measurable、detectable 這三個選項打開</p>
<p><img alt="" height="405" src="/downloads/ag10/20230414-2.png" width="720"/></p>
<p>另外要注意的是感測器 z軸的部分不能為0，否則感測器會直接偵測到地板導致程式暫停模擬</p>
<p><span style="background-color: #00ffff;">記分板程式註解</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    score1 = 0 -- 初始化一個名為score1的變數，值為0
    
    sensor = sim.getObject('./sensor') -- 從模擬場景中獲取一個名為sensor的物體
    
    -- 創建一個UI，包括標題、計分標籤和當前分數值標籤，使用plastique風格
    xml = [[
        &lt;ui title="Scoreboard" closeable="false" resizable="false" style="plastique"&gt;
        &lt;label text="Score:" style="* {background-color: #808080; color: #000000; font-size: 40px; font-weight: bold; padding: 5px; border-radius: 5px; }" id="10"/&gt;
        &lt;label text="0" style="* {background-color: #FFF; color: #000000; font-size: 40px; font-weight: bold; padding: 5px; border-radius: 5px;}" id="30"/&gt;
     
        &lt;/ui&gt;
    ]]
    ui = simUI.create(xml) -- 創建UI
    simUI.setPosition(ui, 0,0, true) -- 將UI定位在屏幕左上角
    bubbleRob = sim.getObject('/bubbleRob') -- 從模擬場景中獲取名為bubbleRob的物體句柄
    ball = sim.getObject('/ball') -- 從模擬場景中獲取名為ball的物體句柄
    bubbleRob2 = sim.getObject('/bubbleRob2') -- 從模擬場景中獲取名為bubbleRob2的物體句柄
    initialPosition = sim.getObjectPosition(bubbleRob, -1) -- 獲取bubbleRob物體的初始位置
    initialOrientation = sim.getObjectOrientation(bubbleRob, -1) -- 獲取bubbleRob物體的初始方向
    initialPosition2 = sim.getObjectPosition(bubbleRob2, -1) -- 獲取bubbleRob2物體的初始位置
    initialOrientation2 = sim.getObjectOrientation(bubbleRob2, -1) -- 獲取bubbleRob2物體的初始方向
    initialballPosition = sim.getObjectPosition(ball, -1) -- 獲取ball物體的初始位置
    initialballOrientation = sim.getObjectOrientation(ball, -1) -- 獲取ball物體的初始方向

end

function sysCall_actuation()
    --simUI.setLabelText(ui, 30, tostring(sim.getFloatSignal("myVariable")))

    -- 讀取接近傳感器的距離值，將其存儲在result變數中
    result=sim.readProximitySensor(sensor)

    -- 如果分數小於5，則執行以下操作
    if(score1&lt;5)then

        -- 如果檢測到接近物體，則執行以下操作
        if(result&gt;0)then
            -- 將score1變數增加1
            score2 = score1+1

            -- 在UI中更新分數值標籤的文本為score2
            simUI.setLabelText(ui, 30, tostring(score2))

            -- 重置bubbleRob、bubbleRob2和ball物體的位置和方向
            sim.setObjectPosition(bubbleRob, -1, initialPosition)
            sim.setObjectOrientation(bubbleRob, -1, initialOrientation)
            sim.setObjectPosition(bubbleRob2, -1, initialPosition2)
            sim.setObjectOrientation(bubbleRob2, -1, initialOrientation2)
            sim.setObjectPosition(ball, -1, initialballPosition)
            sim.setObjectOrientation(ball, -1, initialballOrientation)

            -- 將score1設置為score2
            score1=score2
        end
    else
        -- 如果分數達到5，則暫停模擬
        sim.pauseSimulation()
    end
end</pre>
<p><span style="background-color: #00ffff;">倒數計時器程式註解</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">-- 初始化函數，初始化得分(score1)為0和計時器(count)為3600
function sysCall_init()
    -- initialize the score to 0
    score1 = 0 -- 初始化得分
    count = 3600 -- 初始化計時器
    -- 獲取接近傳感器對象並創建UI界面
    sensor = sim.getObject('./sensor')
    xml = [[
            &lt;ui title="Scoreboard" closeable="false" resizable="false" style="plastique"&gt;
              &lt;label text="60:00.0" style="* {background-color: #F00; color: #FFF; font-size: 32px; font-weight: bold; padding: 4px; border-radius: 4px;}" id="10"/&gt;
              &lt;label text="Score:" style="* {background-color: #808080; color: #000000; font-size: 40px; font-weight: bold; padding: 5px; border-radius: 5px; }" id="20"/&gt;
              &lt;label text="0" style="* {background-color: #FFF; color: #000000; font-size: 40px; font-weight: bold; padding: 5px; border-radius: 5px;}" id="30"/&gt;
            &lt;/ui&gt;
          ]]
    ui = simUI.create(xml)
    simUI.setPosition(ui, 0, 0, true)
    -- 獲取對象及其初始位置/方向
    bubbleRob = sim.getObject('/bubbleRob')
    ball = sim.getObject('/ball')
    initialPosition = sim.getObjectPosition(bubbleRob, -1)
    initialOrientation = sim.getObjectOrientation(bubbleRob, -1)
    initialballPosition = sim.getObjectPosition(ball, -1)
    initialballOrientation = sim.getObjectOrientation(ball, -1)
    
end

function sysCall_actuation() -- 讀取接近傳感器值
    result=sim.readProximitySensor(sensor)
    -- 檢查得分是否小於5
    if(score1&lt;5)then
        -- 檢查接近傳感器是否檢測到某物
        if(result&gt;0)then
            -- 增加得分並更新UI標籤
            score2 = score1+1
            simUI.setLabelText(ui, 30, tostring(score2))
            -- 重置對象的位置和方向
            sim.setObjectPosition(bubbleRob, -1, initialPosition)
            sim.setObjectOrientation(bubbleRob, -1, initialOrientation)
            sim.setObjectPosition(ball, -1, initialballPosition)
            sim.setObjectOrientation(ball, -1, initialballOrientation)
            -- 更新得分變量
            score1=score2
        end
    end
    if count &gt; 0 then -- 檢查計時器是否大於0
          count = count - 1 -- 減少倒數時間
          local minutes = math.floor(count / 60) -- 計算分鐘
          local seconds = count % 60 -- 計算秒數
          local timeStr = string.format("%d:%02d", minutes , seconds) -- 格式化時間字符串
          simUI.setLabelText(ui, 10, timeStr) -- 更新時間UI標籤
          simUI.setLabelText(ui, 30, tostring(score1)) -- 更新score的UI標籤
    else
        -- 如果時間到會暫停模擬
        sim.pauseSimulation()
    end
end</pre>
<p>可以將倒數計時器顯示出來，但計時器所減少的時間會比正常時間快好幾倍</p>
<p><img alt="" height="405" src="/downloads/ag10/20230414-3.png" width="720"/></p>
<p>bubbleRob_football 檔案 : <a href="/downloads/ag10/newbing_bubbleRob_football.ttt">bubbleRob_football_pj1ag10</a></p>
<p>加入連線對戰 bubbleRob_football 檔案 : <a href="/downloads/ag10/newbing_bubbleRob_football-2.ttt">bubbleRob_football-2_pj1ag10</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/N05LssWO1C8" title="YouTube video player" width="560"></iframe></p>
<p><span style="background-color: #00ffff;">連線remoteAPI程式註解</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"># 引入必要的模块
from zmqRemoteApi import RemoteAPIClient
import keyboard
import sim
import time
import simConst

# 打印程式啟動的訊息
print('Program started')

# 關閉所有已開啟的連線
sim.simxFinish(-1)

# 連接到遠端 API 伺服器
clientID = sim.simxStart('192.168.56.1', 19998, True, True, 5000, 5)

# 啟動仿真
sim.simxStartSimulation(clientID, sim.simx_opmode_oneshot_wait)

# 判斷是否成功連線到伺服器
if clientID != -1:
    print('Connected to remote API server')
else:
    print('Failed connecting to remote API server')

# 打印仿真開始的訊息
print('Simulation started')

# 取得左右輪子的控制句柄
errorCode, leftMotor = sim.simxGetObjectHandle(clientID, 'leftMotor2', sim.simx_opmode_oneshot_wait)
errorCode, rightMotor = sim.simxGetObjectHandle(clientID, 'rightMotor2', sim.simx_opmode_oneshot_wait)

# 設定 BubbleRob 的速度
def setBubbleRobVelocity(leftWheelVelocity, rightWheelVelocity):
    # 取得左右輪子的控制句柄
    errorCode, leftMotor = sim.simxGetObjectHandle(clientID, '/leftMotor2', sim.simx_opmode_oneshot_wait)
    errorCode, rightMotor = sim.simxGetObjectHandle(clientID, '/rightMotor2',sim.simx_opmode_oneshot_wait)
    # 設定左右輪子的目標速度
    sim.simxSetJointTargetVelocity(clientID, leftMotor, leftWheelVelocity, simConst.simx_opmode_streaming)
    sim.simxSetJointTargetVelocity(clientID, rightMotor, rightWheelVelocity, simConst.simx_opmode_streaming)

# 循環檢測鍵盤事件
while True:
    if keyboard.is_pressed('up'):
        # 按下"上"鍵，前進
        setBubbleRobVelocity(2.0, 2.0)
    elif keyboard.is_pressed('down'):
        # 按下"下"鍵，後退
        setBubbleRobVelocity(-2.0, -2.0)
    elif keyboard.is_pressed('left'):
        # 按下"左"鍵，左轉
        setBubbleRobVelocity(-2.0, 2.0)
    elif keyboard.is_pressed('right'):
        # 按下"右"鍵，右轉
        setBubbleRobVelocity(2.0, -2.0)
    elif keyboard.is_pressed('q'):
        # 按下"q"鍵，停止仿真
        sim.stopSimulation()
    else:
        # 沒有按下任何鍵，停止移動
        setBubbleRobVelocity(0.0, 0.0)</pre>
<p>此程式必須放在圖片紅色框框檔案中</p>
<p><img alt="" height="405" src="/downloads/ag10/20230416.png" width="720"/></p>
<p><span style="background-color: #00ffff;">啟動遠端API程式註解</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">-- The main script is not supposed to be modified, except in special cases.
require('defaultMainScript')
function sysCall_init()
simRemoteApi.start(19998) -- 啟動遠程 API，監聽端口號為 19998
end</pre>
<p><span style="background-color: #00ffff;">連線 API sensor 程式註解</span><br/><br/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">--在這個函數中初始化變數，設置UI元素，並獲取物體的初始位置和方向
function sysCall_init()
score1 = 0 --初始化分數變量
count = 24000 --初始化計時器變量，代表比賽時間，這裡設置為24000，即400秒
sensor = sim.getObject('./sensor') --獲取名為"sensor"的接近傳感器
--創建UI元素，顯示分數和計時器
xml2 = [[
&lt;ui title="計分板" closeable="false" resizable="false" style="plastique"&gt;
&lt;label text="分數：" style="* {background-color: #808080; color: #000000; font-size: 40px; font-weight: bold; padding: 5px; border-radius: 5px; }" id="20"/&gt;
&lt;label text="0" style="* {background-color: #FFF; color: #000000; font-size: 40px; font-weight: bold; padding: 5px; border-radius: 5px;}" id="30"/&gt;
&lt;/ui&gt;
]]
ui = simUI.create(xml2) --創建計分板UI
simUI.setPosition(ui, 0,0, true) --設置UI位置
xml3 = [[
&lt;ui title="計時器" closeable="false" resizable="false" style="plastique"&gt;
&lt;label text="400:00.0" style="* {background-color: #F00; color: #FFF; font-size: 32px; font-weight: bold; padding: 4px; border-radius: 4px;}" id="10"/&gt;
&lt;/ui&gt;
]]
ui2 = simUI.create(xml3) --創建計時器UI
simUI.setPosition(ui2, 900,0, true) --設置UI位置
--獲取機器人和球的句柄，以及它們的初始位置和方向
bubbleRob = sim.getObject('/bubbleRob')
ball = sim.getObject('/ball')
bubbleRob2 = sim.getObject('/bubbleRob2')
initialPosition = sim.getObjectPosition(bubbleRob, -1)
initialOrientation = sim.getObjectOrientation(bubbleRob, -1)
initialPosition2 = sim.getObjectPosition(bubbleRob2, -1)
initialOrientation2 = sim.getObjectOrientation(bubbleRob2, -1)
initialballPosition = sim.getObjectPosition(ball, -1)
initialballOrientation = sim.getObjectOrientation(ball, -1)
end

--在這個函數中實現比賽計時和計分邏輯
function sysCall_actuation() -- 讀取接近傳感器值
    result=sim.readProximitySensor(sensor)
    -- 檢查得分是否小於5
    if(score1&lt;5)then
        -- 檢查接近傳感器是否檢測到某物
        if(result&gt;0)then
            -- 增加得分並更新UI標籤
            score2 = score1+1
            simUI.setLabelText(ui, 30, tostring(score2))
            -- 重置對象的位置和方向
            sim.setObjectPosition(bubbleRob, -1, initialPosition)
            sim.setObjectOrientation(bubbleRob, -1, initialOrientation)
            sim.setObjectPosition(bubbleRob2, -1, initialPosition2)
            sim.setObjectOrientation(bubbleRob2, -1, initialOrientation2)
            sim.setObjectPosition(ball, -1, initialballPosition)
            sim.setObjectOrientation(ball, -1, initialballOrientation)
            -- 更新得分變量
            score1=score2
        end
    end
    if count &gt; 0 then -- 檢查計時器是否大於0
          count = count - 1 -- 減少倒數時間
          local minutes = math.floor(count / 60) -- 計算分鐘
          local seconds = count % 60 -- 計算秒數
          local timeStr = string.format("%d:%02d", minutes , seconds) -- 格式化時間字符串
          simUI.setLabelText(ui, 10, timeStr) -- 更新時間UI標籤
          simUI.setLabelText(ui, 30, tostring(score1)) -- 更新score的UI標籤
    else
        -- 如果時間到會暫停模擬
        sim.pauseSimulation()
    end
end</pre>
<p><span style="background-color: #00ffff;">連線 API sensor2 程式註解</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
        score1 = 0 -- 初始分數為 0
        sensor = sim.getObject('./sensor2')  -- 取得感測器物件
        xml = [[
             &lt;ui title="Scoreboard" closeable="false" resizable="false" style="plastique"&gt;
             &lt;label text="Score:" style="* {background-color: #808080; color: #000000; font-size: 40px; font-weight: bold; padding: 5px; border-radius: 5px; }" id="40"/&gt;
             &lt;label text="0" style="* {background-color: #FFF; color: #000000; font-size: 40px; font-weight: bold; padding: 5px; border-radius: 5px;}" id="50"/&gt;
              &lt;/ui&gt;
        ]]  -- 創建 UI 界面
        ui = simUI.create(xml)  -- 顯示 UI 界面
        simUI.setPosition(ui, 1770,0, true)  -- 設定 UI 界面的位置
        bubbleRob = sim.getObject('/bubbleRob')  -- 取得 BubbleRob 物件
        ball = sim.getObject('/ball')  -- 取得球物件
        bubbleRob2 = sim.getObject('/bubbleRob2')  -- 取得第二個 BubbleRob 物件
        initialPosition = sim.getObjectPosition(bubbleRob, -1)  -- 取得 BubbleRob 初始位置
        initialOrientation = sim.getObjectOrientation(bubbleRob, -1)  -- 取得 BubbleRob 初始方向
        initialPosition2 = sim.getObjectPosition(bubbleRob2, -1)  -- 取得第二個 BubbleRob 初始位置
        initialOrientation2 = sim.getObjectOrientation(bubbleRob2, -1)  -- 取得第二個 BubbleRob 初始方向
        initialballPosition = sim.getObjectPosition(ball, -1)  -- 取得球的初始位置
        initialballOrientation = sim.getObjectOrientation(ball, -1)  -- 取得球的初始方向
end

function sysCall_actuation()
     --simUI.setLabelText(ui, 30, tostring(sim.getFloatSignal("myVariable")))
     result=sim.readProximitySensor(sensor) -- 讀取感測器的值
     if(score1&lt;5)then -- 如果分數小於 5 分
       if(result&gt;0)then -- 如果感測器的值大於 0
        score2 = score1+1 -- 分數加 1
        simUI.setLabelText(ui, 50, tostring(score2)) -- 更新分數顯示
        sim.setObjectPosition(bubbleRob, -1, initialPosition)  -- 將 BubbleRob 重置到初始位置
        sim.setObjectOrientation(bubbleRob, -1, initialOrientation)  -- 將 BubbleRob 重置到初始方向
        sim.setObjectPosition(bubbleRob2, -1, initialPosition2)  -- 將第二個 BubbleRob 重置到初始位置
        sim.setObjectOrientation(bubbleRob2, -1, initialOrientation2)  -- 將第二個 BubbleRob 重置到初始方向
        sim.setObjectPosition(ball, -1, initialballPosition)  -- 將 Ball 重置到初始位置
        sim.setObjectOrientation(ball, -1, initialballOrientation)  -- 將 Ball 重置到初始方向
        -- 將score1設置為score2
        score1=score2
        end
    else
        -- 如果分數達到5，則暫停模擬
        sim.pauseSimulation()
    end
end</pre>
<p></p>
<p>所有檔案壓縮檔：<a href="/downloads/ag10/bubbleRob football 2a-pj1ag10.7z">bubbleRob football 2a-pj1ag10.7z</a></p>
<h1>w9</h1>
<p>4人操控 bubbleRob 利用 remote API server 錄製影片</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/8Nqbb7NHTvE" title="YouTube video player" width="560"></iframe></p>
<p><span style="background-color: #00ffff;">remote API 程式</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"># pip install pyzmq cbor
from zmqRemoteApi import RemoteAPIClient
import keyboard
import sim
import time
import simConst

print('Program started')
sim.simxFinish(-1) # just in case, close all openㄋed connections
clientID=sim.simxStart('192.168.1.35',19997,True,True,5000,5)
sim.simxStartSimulation(clientID, sim.simx_opmode_oneshot_wait)

if clientID!=-1:
    print('Connected to remote API server')
else:
    print('Failed connecting to remote API server')

print('Simulation started')

errorCode, leftMotor = sim.simxGetObjectHandle(clientID, 'leftMotor', sim.simx_opmode_oneshot_wait)
errorCode, rightMotor = sim.simxGetObjectHandle(clientID, 'rightMotor', sim.simx_opmode_oneshot_wait)

def setBubbleRobVelocity(leftWheelVelocity, rightWheelVelocity):
    errorCode, leftMotor = sim.simxGetObjectHandle(clientID, '/leftMotor', sim.simx_opmode_oneshot_wait)
    errorCode, rightMotor = sim.simxGetObjectHandle(clientID, '/rightMotor',sim.simx_opmode_oneshot_wait)
    sim.simxSetJointTargetVelocity(clientID, leftMotor, leftWheelVelocity, simConst.simx_opmode_streaming)
    sim.simxSetJointTargetVelocity(clientID, rightMotor, rightWheelVelocity, simConst.simx_opmode_streaming)

'''
# Example usage 1:
setBubbleRobVelocity(1.0, 1.0)
time.sleep(2)
setBubbleRobVelocity(0.0, 0.0)
'''
# use keyborad to move BubbleRob

while True:
    if keyboard.is_pressed('w'):
        setBubbleRobVelocity(2.0, 2.0)
    elif keyboard.is_pressed('s'):
        setBubbleRobVelocity(-2.0, -2.0)
    elif keyboard.is_pressed('a'):
        setBubbleRobVelocity(-2.0, 2.0)
    elif keyboard.is_pressed('d'):
        setBubbleRobVelocity(2.0, -2.0)
    elif keyboard.is_pressed('q'):
        # stop simulation
        sim.stopSimulation()
    else:
        setBubbleRobVelocity(0.0, 0.0)</pre>
<p><span style="background-color: #00ffff;"><span style="background-color: #ffffff;"></span></span></p>
<p><span style="background-color: #00ffff;"><span style="background-color: #ffffff;">控制 remote API 檔案：<a href="/downloads/bubbleRob_zmq_green_red_example.7z">bubbleRob_zmq_green_red_example.7z</a></span><br/></span></p><h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><!-- 導入 brython 程式庫 --></pre>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><!-- 啟動 Brython --></pre>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><!-- editor1 開始 --></pre>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><!-- editor1 結束 --></pre>
<hr/>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><!-- ########################################## --></pre>
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><!-- editor2 開始 --></pre>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"><!-- editor2 結束 --></pre>
<hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h2>Brython_ex2</h2>
<p>This code uses the Euler method to approximate the solution to the ODE dy/dx = x - y with an initial condition of y0 = 1.0. The solution is calculated for a range of x values from 0 to 5.</p>
<p id="brython_div"></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
</pre>
<p>Solve ODE:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new paragraph element and set its text content to the solution
p = document.createElement('p')
p.textContent = f"The solution to the ODE is: {y}"

# Append the paragraph element to the body of the webpage
document.body.appendChild(p)</pre>
<p></p>
<p>
<script type="text/python3">
from browser import document, window

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new div element to hold the plot
#plot_div = document.createElement('div')
#plot_div.id = 'plot'
#document.body.appendChild(plot_div)
plot_div = document["brython_div"]

# Plot the solution using plotly.js
data = [{'x': x, 'y': y}]
window.Plotly.newPlot('brython_div', data)
</script>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</p>
<p>Brython environment and <a href="https://plotly.com/javascript/">Plotly.js</a>:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
// ]]&gt;&lt;/script&gt;
&lt;p id="brython_div"&gt;&lt;/p&gt;</pre>
<p>Brython programe with Plotly.js:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, window

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new div element to hold the plot
#plot_div = document.createElement('div')
#plot_div.id = 'plot'
#document.body.appendChild(plot_div)
plot_div = document["brython_div"]

# Plot the solution using plotly.js
data = [{'x': x, 'y': y}]
window.Plotly.newPlot('brython_div', data)</pre>
<p>This code defines a function dy_dx that represents the mass-spring-damper ordinary differential equation. The Euler method is used to solve this equation for a range of x values from 0 to 20 with initial conditions of y0 = [1.0, 0.0]. The solution is then plotted on the webpage using <a href="https://plotly.com/javascript/">plotly.js</a>.</p>
<p id="mass-spring-damper"></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">
<script type="text/python3">
from browser import document, window

m = 1.0  # mass
k = 1.0  # spring constant
c = 0.1  # damping coefficient

def dy_dx(y, x):
    y1, y2 = y
    return [y2, -(k/m)*y1 - (c/m)*y2]

x_start = 0
x_end = 20
n_points = 1000
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = [1.0, 0.0]
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y_new = [y[-1][j] + h * dy_dx(y[-1], x[i-1])[j] for j in range(2)]
    y.append(y_new)

# Create a new div element to hold the plot
'''
plot_div = document.createElement('div')
plot_div.id = 'plot'
document.body.appendChild(plot_div)
'''

# Plot the solution using plotly.js
data = [{'x': x, 'y': [y[i][0] for i in range(len(y))]}]
layout = {'title': 'Mass-Spring-Damper System', 'xaxis': {'title': 'Time'}, 'yaxis': {'title': 'Displacement'}}
window.Plotly.newPlot('mass-spring-damper', data, layout)
</script>
</pre>
<p>This code defines a function dy_dx that represents the mass-spring-damper system with a PID controller. The gains of the PID controller are set to Kp = 10.0, Ki = 1.0, and Kd = 0.5. The Euler method is used to solve this system of equations for a range of x values from 0 to 20 with initial conditions of y0 = [0.0, 0.0, 0.0, 0.0]. The response of the system is then plotted on the webpage using <a href="https://plotly.com/javascript/">plotly.js</a>.</p>
<p id="pid-control"></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">
<script type="text/python3">
from browser import document, window

m = 1.0  # mass
k = 1.0  # spring constant
c = 0.1  # damping coefficient

Kp = 10.0  # proportional gain
Ki = 1.0   # integral gain
Kd = 0.5   # derivative gain

def dy_dx(y, x):
    y1, y2, e_int, e_prev = y
    e = 1 - y1
    de_dt = -y2
    u = Kp * e + Ki * e_int + Kd * de_dt
    return [y2, (u - k*y1 - c*y2)/m, e, e]

x_start = 0
x_end = 20
n_points = 1000
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = [0.0, 0.0, 0.0, 0.0]
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y_new = [y[-1][j] + h * dy_dx(y[-1], x[i-1])[j] for j in range(4)]
    y.append(y_new)

'''
# Create a new div element to hold the plot
plot_div = document.createElement('div')
plot_div.id = 'plot'
document.body.appendChild(plot_div)
'''

# Plot the solution using plotly.js
data = [{'x': x, 'y': [y[i][0] for i in range(len(y))], 'name': 'Output'},
        {'x': x, 'y': [1 for _ in range(len(y))], 'name': 'Setpoint'}]
layout = {'title': 'Mass-Spring-Damper System with PID Control', 'xaxis': {'title': 'Time'}, 'yaxis': {'title': 'Displacement'}}
window.Plotly.newPlot('pid-control', data, layout)
</script>
</pre>
<p height="480" id="container" width="640"></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js" type="text/javascript"></script>
<script type="text/python"></script>
</pre>